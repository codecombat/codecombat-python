# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .classroom_response_courses_item import ClassroomResponseCoursesItem
from .object_id_string import ObjectIdString


class ClassroomResponse(pydantic.BaseModel):
    """
    Subset of properties listed here
    """

    id: typing.Optional[ObjectIdString] = pydantic.Field(alias="_id")
    name: typing.Optional[str]
    members: typing.Optional[typing.List[ObjectIdString]]
    owner_id: typing.Optional[ObjectIdString] = pydantic.Field(alias="ownerID")
    description: typing.Optional[str]
    courses: typing.Optional[typing.List[ClassroomResponseCoursesItem]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
