# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .auth_identity import AuthIdentity
from .license import License
from .object_id_string import ObjectIdString
from .role_string import RoleString
from .subscription import Subscription
from .user_stats import UserStats


class UserResponse(pydantic.BaseModel):
    """
    Subset of properties listed here
    """

    id: typing.Optional[ObjectIdString] = pydantic.Field(alias="_id")
    email: typing.Optional[str]
    name: typing.Optional[str]
    slug: typing.Optional[str]
    role: typing.Optional[RoleString]
    stats: typing.Optional[UserStats]
    o_auth_identities: typing.Optional[typing.List[AuthIdentity]] = pydantic.Field(alias="oAuthIdentities")
    subscription: typing.Optional[Subscription]
    license: typing.Optional[License]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
