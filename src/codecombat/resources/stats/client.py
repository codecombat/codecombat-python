# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...environment import CodeCombatEnvironment
from .types.license_stats_response import LicenseStatsResponse
from .types.playtime_stats_response import PlaytimeStatsResponse


class StatsClient:
    def __init__(
        self, *, environment: CodeCombatEnvironment = CodeCombatEnvironment.PRODUCTION, username: str, password: str
    ):
        self._environment = environment
        self._username = username
        self._password = password

    def get_playtime_stats(
        self,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
    ) -> PlaytimeStatsResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "playtime-stats"),
            params={"startDate": start_date, "endDate": end_date, "country": country},
            auth=(self._username, self._password),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PlaytimeStatsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_license_stats(self) -> LicenseStatsResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "license-stats"),
            auth=(self._username, self._password),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LicenseStatsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncStatsClient:
    def __init__(
        self, *, environment: CodeCombatEnvironment = CodeCombatEnvironment.PRODUCTION, username: str, password: str
    ):
        self._environment = environment
        self._username = username
        self._password = password

    async def get_playtime_stats(
        self,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
    ) -> PlaytimeStatsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "playtime-stats"),
                params={"startDate": start_date, "endDate": end_date, "country": country},
                auth=(self._username, self._password),
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PlaytimeStatsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_license_stats(self) -> LicenseStatsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "license-stats"),
                auth=(self._username, self._password),
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LicenseStatsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
