# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx

from ...core.api_error import ApiError
from ...environment import CodeCombatEnvironment


class AuthClient:
    def __init__(
        self,
        *,
        environment: CodeCombatEnvironment = CodeCombatEnvironment.PRODUCTION,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
    ):
        self._environment = environment
        self._username = username
        self._password = password

    def get(
        self,
        *,
        provider: str,
        access_token: typing.Optional[str] = None,
        code: typing.Optional[str] = None,
        redirect: typing.Optional[str] = None,
        error_redirect: typing.Optional[str] = None,
    ) -> None:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "auth/login-o-auth"),
            params={
                "provider": provider,
                "accessToken": access_token,
                "code": code,
                "redirect": redirect,
                "errorRedirect": error_redirect,
            },
            auth=(self._username, self._password),
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAuthClient:
    def __init__(
        self,
        *,
        environment: CodeCombatEnvironment = CodeCombatEnvironment.PRODUCTION,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
    ):
        self._environment = environment
        self._username = username
        self._password = password

    async def get(
        self,
        *,
        provider: str,
        access_token: typing.Optional[str] = None,
        code: typing.Optional[str] = None,
        redirect: typing.Optional[str] = None,
        error_redirect: typing.Optional[str] = None,
    ) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "auth/login-o-auth"),
                params={
                    "provider": provider,
                    "accessToken": access_token,
                    "code": code,
                    "redirect": redirect,
                    "errorRedirect": error_redirect,
                },
                auth=(self._username, self._password),
            )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
